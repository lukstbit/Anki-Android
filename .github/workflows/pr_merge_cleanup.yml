name: Cleanup after PR merge

on:
  pull_request_target:
    types: [ closed ]

jobs:
  prMergedCleanup:
    if: ${{ github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
      - name: Assign PR to latest milestone
        continue-on-error: true
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.pull_request.number }},
              milestone: 51
            });
  
            // graphql query to get referenced issues to merged pull request
            const query = `query($_url:URI!) {
              resource(url:$_url) {
                ... on PullRequest {
                  closingIssuesReferences(first:10) {
                    nodes {
                      number
                    }
                  }              
                }
              }
            }`;
  
            const variables = {
              _url: "https://github.com/ankidroid/${{ github.event.repository.name }}/pull/${{ github.event.pull_request.number }}"
            };
  
            const result = await github.graphql(query, variables);
            const refIssues = result.resource.closingIssuesReferences.nodes;
  
            for (issue of refIssues) {
              console.log("Adding milestone to linked issue: ", issue.number);
  
              // if issues have milestone, then it will be removed and updated with following
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                milestone: 51
              });
            }

      - name: Remove assigned people from PR
        continue-on-error: true
        uses: actions/github-script@v6
        with:
          script: |
            const variables = {
              _url: "https://github.com/ankidroid/${{ github.event.repository.name }}/pull/${{ github.event.pull_request.number }}"
            };
  
            const query = `query($_url:URI!) {
              resource(url:$_url) {
                ... on PullRequest {
                  closingIssuesReferences(first:10) {
                    nodes {
                      number
                    }
                  }
                }
              }
            }`;
  
            const result = await github.graphql(query, variables);
            const refIssues = result.resource.closingIssuesReferences.nodes;
  
            let listAssignees_result = await github.rest.issues.listAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
  
            // remove all the assignees of the issue
            if (listAssignees_result.data !== null && listAssignees_result.data.length > 0) {
              let assignees_info_list = listAssignees_result.data;
              let assignees_list=[];
              for (let assignee_info of assignees_info_list) {
                  assignees_list.push(assignee_info["login"]);
              }
  
              await github.rest.issues.removeAssignees({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    assignees: assignees_list,
              });
              console.log("Removed Assignees in this pr#",context.issue.number);
  
              for (issue of refIssues) {
                await github.rest.issues.removeAssignees({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    assignees: assignees_list,
                  });
                  console.log("Removed Assignees in issue#",issue.number);
              }
            }

      - name: Remove labels from PR
        continue-on-error: true
        uses: actions/github-script@v6
        with:
          script: |
            let removeLabelsList = [
              "Pending Merge", 
              "Needs Author Reply", 
              "Needs Review", 
              "Review High Priority", 
              "Needs Second Approval",
              "Blocked by dependency", 
              "Needs a new dev", 
              "squash-merge", 
              "Keep Open", 
              "Stable"
            ];

            async function removeLabel(label) {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                name: label
              });
            }

            async function addPostMergeComments() {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `Maintainers: Please [Sync Translations](https://github.com/ankidroid/Anki-Android/actions/workflows/sync_translations.yml) to produce a commit with only the automated changes from this PR.

            Read more about updating strings on the wiki,
            - [localization-administration](https://github.com/ankidroid/Anki-Android/wiki/Development-Guide#localization-administration)
            - [download-localized-strings](https://github.com/ankidroid/Anki-Android/wiki/Development-Guide#download-localized-strings)`
              })
            }

            let result = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            if (result.data !== null && result.data.length > 0) {
              let labels = result.data;
              for (let label of labels) {
                  if (removeLabelsList.includes(label.name)) {
                    console.log("Removed: ", label.name);
                    removeLabel(label.name);
                  }

                  // add post merge comments for 'strings' labeled PR
                  if (label.name == "Strings") {
                    addPostMergeComments();
                  }
              }
            }